package cn.polarismesh.agent.plugin.nacos.delegate;


import cn.polarismesh.agent.plugin.nacos.constants.NacosConstants;

import com.alibaba.nacos.api.exception.NacosException;
import com.alibaba.nacos.client.naming.net.NamingProxy;
import com.alibaba.nacos.client.utils.LogUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.Properties;


public class DynamicNamingProxyAfter130 extends NamingProxy {


    private String secondaryServer;
    private NamingProxyAssist assist;
    private Logger logger = LoggerFactory.getLogger("com.alibaba.nacos.client.naming");


    public DynamicNamingProxyAfter130(String namespaceId, String endpoint, String serverList, Properties properties) {
        super(namespaceId, endpoint, serverList, properties);
        init();
    }

    private void init() {
        this.secondaryServer = System.getProperty(NacosConstants.OTHER_NACOS_SERVER_ADDR);
        this.assist = new NamingProxyAssist();
    }

    @Override
    public String callServer(String api, Map<String, String> params, Map<String, String> body, String curServer, String method) throws NacosException {
        String fullApi = api + NacosConstants.LINK_FLAG + method;

        // 在注册服务时候插入元数据
        if (NacosConstants.REGISTER_SERVICE.equals(fullApi)) {
            try {
                assist.fillMetadata(params);
            } catch (Exception e) {
                logger.error("register service fillMetadata failed: ", e);
            }
        }

        // 查询列表时候从组合两个数据源
        if (NacosConstants.QUERY_LIST.equals(fullApi)) {
            return queryListCallServerProxy(api, params, body, curServer, method);
        }

        String s = super.callServer(api, params, body, curServer, method);
        try {
            super.callServer(api, params, body, this.secondaryServer, method);
        } catch (NacosException e) {
            LogUtils.NAMING_LOGGER.error("secondaryServer callServer failed: {} ", this.secondaryServer, e);
        }
        return s;
    }

    private String queryListCallServerProxy(String api, Map<String, String> params, Map<String, String> body, String curServer, String method) throws NacosException {
        String primaryList = super.callServer(api, params, body, curServer, method);
        String secondaryList = "";
        try {
            secondaryList = super.callServer(api, params, body, secondaryServer, method);
        } catch (NacosException e) {
            logger.error("queryListCallServerProxy  {} failed.", this.secondaryServer, e);
        }
        try {
            return assist.mergeResult(primaryList, secondaryList);
        } catch (Exception e) {
            logger.error("mergeResult failed: ", e);
            return primaryList;
        }

    }

}
